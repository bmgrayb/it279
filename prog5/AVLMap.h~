#ifndef _AVLMAP_H_
#define _AVLMAP_H_

#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include "AVLTreeNode"
using namespace std;

template<class S, class T>
  class AVLMap: public MapInterface<S,T>
 {

  class TreeNode
  {
  public:
    TreeNode *leftChild;
    TreeNode *rightChild;
    T value;
    S key;
    int height;
    
    TreeNode(T val, S k)
    {
      value = val;
      key = k;
      height = 0;
      leftChild = NULL;
      rightChild = NULL;
    }
    
    ~TreeNode()
    {
    }

  };

  ///////////////////////////////////////////////////////////
  //Private methods for AVL map
 private:
  TreeNode *root;

  int getHeight(TreeNode *root)
  {
    if(root == NULL)
      return -1;
    else
    {
      return root->height;
    }

  }

  /*
  //This method recursively adds an element to the tree
  TreeNode* insert(TreeNode *node, T value, S key)
  {
    if(node == NULL)
      node = new TreeNode(value, key);
    else if(key < node->key)
    {
      node->left = insert(node->left, value, key);
    }
    else if(key > node->key)
    {
      node->right = insert(node->right, value, key);
    }
    else
    {
      node->value = value;
    }

    return node;
  }
  */
  
  //this method adds an element to a tree and balances it
  void insert(TreeNode *node, T value, S key)
  {
    
  }

  //This method adds an element to a tree
  void insert(T value, S key)
  {
    root = insert(root, value, key); 
  }


  //This method recursively searches the tree for a node with the given key
  TreeNode* searchTree(TreeNode *node, S key)
  {
    TreeNode *foundNode = NULL;

    if(node != NULL)
    {
      if(node->key == key)
	foundNode = node;
      else if(key < node->key)
	foundNode = search(node->left, key);
      else if(key > node->key)
	foundNode = search(node->right, key);
    }

    return foundNode;
  }


  

  //This method recursively deletes every node
  void deleteTree(TreeNode *node)
  {
    if(node != NULL)
    {
      deleteNode(node->left);
      deleteNode(node->right);
      
      delete node;
    }
  }

  //This method creates a vector of nodes 
  void getNodes(TreeNode *node, vector<TreeNode*>*nodeList)
  {
    if(node != NULL)
    {
      getNodes(node->left, nodeList);
      nodes->push_back(node);
      getNodes(node->right, nodeList);
    }
  }

  /*

  //this method finds the node containing the key using locality of reference
  bool find(const S& key, TreeNode *& node)
  {
    if(key == NULL)
      return false;
    else if(node == NULL)
      return false;
    else if(key < node->key)
    {
      find(key, node->left);
      
      if(height(node->left) - height(node->right) == 2)
      {
	if(key < node->left->key)
	  rotateLeftChild(node);
	else
	  doubleLeftChild(node);
      }

    }
    else if(node->key < key)
    {
      find(key, node->right);
      
      if(height(node->right) - height(node->left) == 2)
      {
	if(node->right->key < key)
	  rotateRightChild(node);
	else
	  doubleRightChild(node);
      }

    }
    else{}

    node->height = max(height(node->left), height(node->right)) + 1;

  }

  */

  //this method rotates the left child
  void rotateLeftChild(TreeNode *&k2)
  {
    TreeNode *k1 = k2->left;
    k2->left = k1->right;
    k1->right = k2;
    k2->height = max(height(k2->left), height(k2->right)) + 1;
    k1->height = max(height(k1->left), k2->height) + 1;
    k2 = k1;
    
  }

  //this method rotates the right child
  void rotateRightChild(TreeNode *&k2)
  {
    TreeNode *k1 = k2->right;
    k2->right = k1->left;
    k1->left = k2;
    k2->height = max(height(k2->right), height(k2->left)) + 1;
    k1->height = max(height(k1->right), k2->height) + 1;
    k2 = k1;
  }

  //this method double rotates the left child
  void doubleLeftChild(TreeNode *&k3)
  {
    rotateRightChild(k3->left);
    rotateLeftChild(k3);
  }

  //thie method double rotates the right child
  void doubleRightChild(TreeNode *&k3)
  {
    rotateLeftChild(k3->right);
    rotateRightChild(k3);
  }

  ///////////////////////////////////////////////////////
  //Public methods for AVL map
 public:
  AVLMap()
  {
    root = NULL;
  }

  ~AVLMap()
  {
    deleteTree(root);
  }

  //returns a boolean if there is node containing the key
  bool find(const S& key)
  {
    TreeNode *node = search(root, key);

    if(node != NULL)
      return true;
    else
      return false;
   
  }

  //overides the operator function
  T& operator(const S& key)
  {
    TreeNode *node = searchTree(root, key);

    if(node != NULL)
      return node->value;
    else
    {
      insert(key, 0);
      node = search(root, key);

      return n->value;
    }
  }

  //returns a vector of all the keys
  vector<S> getKeys()
  {
    vector<S>keyList;
    vector<TreeNode*>nodeList;

    getNodes(root, &nodeList);

    int i;
    for(i = 0; i < nodeList.size(); i++)
    {
      keyList.push_back(nodeList[i]->key);
    }

    return keyList;
  }

};

#endif
